pragma solidity >=0.5.12;

contract ChainodeToken {
    
    mapping(address => uint256) public balances;

    uint256 public totalSupply = 0;
    uint storedData;
    

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);        
        require(balances[_to] + _value >= balances[_to]); 
        balances[msg.sender] -= _value;                  
        balances[_to] += _value;                           
        return true;
    }

    
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
    

    function mint(uint256 _value) public {

            balances[msg.sender] += _value;
            totalSupply += _value;
    }
    
    function burn(uint256 _value) public returns (bool success) {
        require(_value <= balances[msg.sender]);
        balances[msg.sender] -= _value;
        totalSupply -= _value;
        return true;
    }

    function set(uint x) public {
        storedData = x;
    }

    function get() public view returns (uint) {
        return storedData;
    }
    

}
